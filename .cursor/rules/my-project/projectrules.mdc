---
alwaysApply: true
---
# Лучшие практики Next.js

## Структура проекта

- Используйте структуру директорий App Router
- Размещайте компоненты в директории `app` для компонентов конкретных маршрутов
- Размещайте общие компоненты в директории `components`
- Размещайте утилиты и вспомогательные функции в директории `lib`
- Используйте строчные буквы с дефисами для директорий (например, `components/auth-wizard`)

## Компоненты

- Используйте Server Components по умолчанию
- Явно помечайте клиентские компоненты с помощью 'use client'
- Оборачивайте клиентские компоненты в Suspense с fallback
- Используйте динамическую загрузку для некритичных компонентов
- Реализуйте правильные границы ошибок
- Размещайте статический контент и интерфейсы в конце файла

## Производительность

- Оптимизируйте изображения: используйте формат WebP, размерные данные, ленивую загрузку
- Минимизируйте использование 'useEffect' и 'setState'
- Отдавайте предпочтение Server Components (RSC) где возможно
- Используйте динамическую загрузку для некритичных компонентов
- Реализуйте правильные стратегии кеширования

## Получение данных

- Используйте Server Components для получения данных когда возможно
- Реализуйте правильную обработку ошибок для получения данных
- Используйте подходящие стратегии кеширования
- Правильно обрабатывайте состояния загрузки и ошибок

## Маршрутизация

- Используйте соглашения App Router
- Реализуйте правильные состояния загрузки и ошибок для маршрутов
- Правильно используйте динамические маршруты
- Обрабатывайте параллельные маршруты при необходимости

## Формы и валидация

- Используйте Zod для валидации форм
- Реализуйте правильную серверную валидацию
- Правильно обрабатывайте ошибки форм
- Показывайте состояния загрузки при отправке форм

## Управление состоянием

- Минимизируйте клиентское состояние
- Используйте React Context с осторожностью
- Отдавайте предпочтение серверному состоянию когда возможно
- Реализуйте правильные состояния загрузки
